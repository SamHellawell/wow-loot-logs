{"version":3,"file":"static/webpack/static/development/pages/logs.js.14e86939ffc2ac3c28db.hot-update.js","sources":["webpack:///./src/table-view.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterList';\n\nfunction getFormattedDate(date) {\n  let year = date.getFullYear();\n  let month = (1 + date.getMonth()).toString().padStart(2, '0');\n  let day = date.getDate().toString().padStart(2, '0');\n  return month + '/' + day + '/' + year;\n}\n\nfunction TableView({columns, values, onRequestSort, orderBy, order, columnMaps = {}}) {\n  const createSortHandler = (property) => (event) => {\n    if (onRequestSort) {\n      onRequestSort(event, property);\n    }\n  };\n\n  return (\n    <TableContainer component={Paper}>\n      <Table aria-label=\"Table View\">\n        <TableHead>\n          <TableRow>\n            {columns.map(column => (\n              <TableCell\n                align=\"left\"\n                key={column}\n                sortDirection={orderBy === column ? order : false}\n              >\n                {onRequestSort ? (\n                  <TableSortLabel\n                    active={orderBy === column}\n                    direction={orderBy === column ? order.toLowerCase() : 'ASC'}\n                    onClick={createSortHandler(column)}\n                  >\n                    {columnMaps[column] || column}\n                  </TableSortLabel>\n                ) : (\n                  <>\n                    {columnMaps[column] || column}\n                  </>\n                )}\n              </TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {values.map((value, index) => (\n            <TableRow key={index} onClick={onRowClick}>\n              {value.map((row, rowIndex) => {\n                let displayValue = row;\n\n                if (columns[rowIndex] === 'date') {\n                  displayValue = getFormattedDate(new Date(displayValue));\n                } else if (typeof displayValue === 'string') {\n                  const hyperLinkRegex = /=HYPERLINK\\(([\"'])(.*?)\\1;\\\"(.*?)\\\"\\)/i;\n                  const matches = displayValue.match(hyperLinkRegex);\n                  if (matches && matches.length) {\n                    const url = matches[2];\n                    const text = matches[3];\n                    displayValue = (\n                      <a href={url} target=\"_blank\">{text}</a>\n                    );\n                  }\n                }\n\n                if (rowIndex === 0) {\n                  return (\n                    <TableCell component=\"th\" scope=\"value\">{displayValue}</TableCell>\n                  );\n                } else {\n                  return (\n                    <TableCell align=\"left\">{displayValue}</TableCell>\n                  );\n                }\n              })}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nexport default TableView;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AA5BA;AAmCA;AACA;AACA;;;;A","sourceRoot":""}