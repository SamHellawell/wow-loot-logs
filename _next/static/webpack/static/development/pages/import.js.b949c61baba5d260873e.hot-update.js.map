{"version":3,"file":"static/webpack/static/development/pages/import.js.b949c61baba5d260873e.hot-update.js","sources":["webpack:///./pages/import.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport ProTip from '../src/ProTip';\nimport Link from '../src/Link';\nimport Copyright from '../src/Copyright';\n\nimport db from '../services/db';\n\nconst allowedColumns = [\n\t\"player\",\n\t\"date\",\n\t\"item\",\n\t\"itemID\",\n\t\"itemString\",\n\t\"votes\",\n\t\"response\",\n\t\"class\",\n\t\"instance\",\n\t\"boss\",\n\t\"gear1\",\n\t\"gear2\",\n\t\"subType\",\n\t\"equipLoc\",\n\t\"note\",\n  \"logid\",\n];\n\nexport default function Import() {\n  const [csvData, setCSVData] = useState('');\n\n  function handleCSVChange(event) {\n    setCSVData(event.target.value);\n  }\n\n  function handleCSVImport(event) {\n    event.preventDefault();\n\n    const dataSplitter = `,`;\n    const lineSplitter = `\\n`;\n\n    const lines = csvData.split(lineSplitter);\n    const columns = lines[0].split(dataSplitter);\n    columns.push('logid');\n\n    console.log('importing', lines.length, 'records with columns', columns);\n\n    for (let i = 1; i < lines.length; i++) {\n      const line = lines[i];\n      const data = line.split(dataSplitter);\n\n      const logId = data[0] + data[1] + data[2];\n      data.push(logId);\n\n      if (data.length === columns.length) {\n        let query = 'INSERT INTO lootlogs(\"' + columns[0] + '\"';\n        let queryValues = '';\n\n        for (let c = 0; c < columns.length; c++) {\n          const column = columns[c];\n\n          if (allowedColumns.indexOf(column) > -1) {\n            if (c !== 0) {\n              query += ', \"' + column + '\"';\n            }\n\n            let rowValue = data[c];\n            if (column === 'date') {\n              rowValue = new Date('20' + rowValue.split('/')[2], rowValue.split('/')[1] - 1, rowValue.split('/')[0]).getTime();\n            }\n\n            queryValues += (c === 0 ? '' : ', ') + '\\'' + (rowValue + '').replace(/'/g, \"\") + '\\'';\n          }\n        }\n\n        query += ')\\nVALUES(';\n        query += queryValues + ');';\n\n        try {\n          db.runQuery(query);\n          console.log('query success', query);\n        } catch (error) {\n          console.error('query failed', query)\n          console.error('Unable to insert row ', (i-1), 'error:', error);\n        }\n      }\n    }\n\n    console.log('import done, export db and save it or browse pages')\n  }\n\n  function handleExport() {\n    const binaryArray = db.export();\n    const blob = new Blob([binaryArray], {type: \"application/x-sqlite3\"});\n    const link = document.createElement('a');\n    link.href = window.URL.createObjectURL(blob);\n    link.download = 'database.db';\n    link.click();\n  }\n\n  return (\n    <Container maxWidth=\"sm\">\n      <Box my={4}>\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n          Import Loot Logs\n        </Typography>\n\n        <form noValidate autoComplete=\"off\" onSubmit={handleCSVImport}>\n          <TextField rows={10} label=\"CSV Data\" multiline onChange={handleCSVChange} value={csvData} fullWidth />\n          <br /><br />\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n            Import\n          </Button>\n        </form>\n\n        <br /><br />\n\n        <Button onClick={handleExport} variant=\"contained\" color=\"primary\">\n          Export Database\n        </Button>\n\n        <br /><br />\n\n        <Link href=\"/logs\" color=\"secondary\">\n          Go to logs page\n        </Link>\n      </Box>\n    </Container>\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAmsourceRoot":""}