{"version":3,"file":"static/webpack/static/development/pages/query.js.3d8eef5aeeece87a1a7a.hot-update.js","sources":["webpack:///./pages/query.js"],"sourcesContent":["import React, {useState} from 'react';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport TableView from '../src/table-view';\n\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\n\nimport db from '../services/db';\n\nconst defaultQueries = [{\n  label: 'Custom Query',\n  query: 'select sqlite_version()'\n}, {\n  label: 'All Loot',\n  query: 'SELECT * FROM lootlogs'\n}, {\n  label: 'Items dropped by boss',\n  query: 'SELECT item, boss FROM lootlogs GROUP BY item ORDER BY boss'\n}, {\n  label: 'Awarded loot with logged reason',\n  query: 'SELECT player,note,item,response,date FROM lootlogs WHERE note!=\"\"'\n}, {\n  label: 'Awarded loot without logged reason',\n  query: 'SELECT player,note,item,response,date FROM lootlogs WHERE note=\"\"'\n}, {\n  label: 'Search by player name',\n  query: 'SELECT * FROM lootlogs WHERE player LIKE \"%Magi%\"'\n}, {\n  label: 'Search by player name in Blackwing Lair',\n  query: 'SELECT * FROM lootlogs WHERE (player LIKE \"%Magi%\" AND instance LIKE \"%Blackwing%\")'\n}, {\n  label: 'Caster DPS loot drops',\n  query: 'SELECT * FROM lootlogs WHERE (class LIKE \"%MAGE%\" OR class LIKE \"%WARLOCK%\") ORDER BY class'\n}, {\n  label: 'Healer loot drops',\n  query: 'SELECT * FROM lootlogs WHERE (class LIKE \"%PRIEST%\" OR class LIKE \"%SHAMAN%\" OR class LIKE \"%DRUID%\") ORDER BY class'\n}, {\n  label: 'Show all players awarded loot',\n  query: 'SELECT player,date FROM lootlogs GROUP BY player ORDER BY date DESC'\n}];\n\nexport default function RunQuery() {\n  const [error, setError] = useState();\n  const [query, setQuery] = useState(defaultQueries[0]);\n  const [queryStr, setQueryStr] = useState(defaultQueries[0].query);\n  const [queryResult, setQueryResult] = useState(db.execQuery('select sqlite_version()'));\n  const inputLabel = React.useRef(null);\n\n  function handleChange(event) {\n    setQuery(event.target.value);\n    setQueryStr(event.target.value.query);\n  }\n\n  function handleQueryStrChange(event) {\n    setQueryStr(event.target.value);\n  }\n\n  function handleRunQuery() {\n    setQueryResult(null);\n    try {\n      const result = db.execQuery(queryStr);\n      setQueryResult(result);\n    } catch (e) {\n      setError(e.toString());\n    }\n  }\n\n  return (\n    <Box my={4}>\n      <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n        Run Query\n      </Typography>\n\n      {/* TODO: select with popular queries, such as items dropped by which bosses, items by player name etc */}\n      <br />\n\n      <FormControl variant=\"outlined\" fullWidth>\n        <InputLabel ref={inputLabel}>\n          Default Queries\n        </InputLabel>\n        <Select\n          value={query}\n          onChange={handleChange}\n          labelWidth={118}\n          fullWidth\n        >\n          {defaultQueries.map((query, index) => (\n            <MenuItem value={query} key={index}>{query.label}</MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n\n      <br /><br />\n\n      <TextField\n        rows={6}\n        label=\"Query\"\n        multiline\n        variant=\"outlined\"\n        fullWidth\n        value={queryStr}\n        onChange={handleQueryStrChange}\n      />\n\n      <br /><br />\n\n      <Button onClick={handleRunQuery} variant=\"contained\" color=\"primary\">\n        Run\n      </Button>\n\n      <br /><br />\n\n      {queryResult ? (\n        queryResult.map(result => (\n          <>\n            <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n              Result ({result.values.length})\n            </Typography>\n\n            <br />\n\n            <TableView\n              columns={result.columns}\n              values={result.values}\n            />\n            <br /><br />\n          </>\n        ))\n      ) : (\n        <>\n          {error ? error : 'Executing query...'}\n        </>\n      )}\n    </Box>\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAKA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAZA;AAsBA;;;;A","sourceRoot":""}